<iscomment>
The "gtm-metadata" div and the additional logic below was added to resolve a specific issue
occurring on mobile platforms only.

What will happen is, if the customer purchases an item, sees the order confirmation page and then
leaves the order confirmation open in their browser; e.g. Safari, Chrome both demonstrated this,
then after the app connection times out or if the customer "swipe closes" the app, as you can on iOS,
when the app reloads, while it would not initiate a new call to the server, it does reload what it has
in its local cache, which includes re-executing javascript.

This meant that the call to "push" the data layer would happen again. This was noticed in Google
Analytics where a single transaction for $50.00 would have a value greater than that; $150, $250, maybe more,
depending on how many times it had been "re-pushed" to GA.
As one can imagine, given a client with a larger customer base, this could greatly throw off the numbers in
GA compared to what is in SFCC or the customer's backend OMS/ERP.

It is worth noting that this solution uses localStorage. Local Storage is the same across the entire browser.
So, cannot simply store true and false for "the order confirmation data layer has been sent", because then
subsequent orders would never have their data layer pushed. Orders sent are tracked by storing the orderId.
</iscomment>
<script>
    var pageAction = '${pdict.action.replace("-", "").toLowerCase()}';
    window.dataLayer = window.dataLayer || [];
    var orderId = -1;

    // In all cases except Order Confirmation, the data layer should be pushed, so default to that case
    var pushDataLayer = true;
    if (pageAction === 'orderconfirm') {
        // As of now, the correction is for order confirmation only
        orderId = getOrderId(<isprint value="${pdict.datalayer}" encoding="off"/>);
        var ordersPushedToGoogle = getOrdersPushedToGoogle();
        var orderHasBeenPushedToGoogle = orderHasBeenPushedToGoogle(orderId, ordersPushedToGoogle);
        if (orderHasBeenPushedToGoogle) {
            // If the data has already been sent, let's not push it again.
            pushDataLayer = false;
        }
    }

    if (pushDataLayer) {
        dataLayer.push(<isprint value="${pdict.datalayer}" encoding="off"/>);
        if (pageAction === 'orderconfirm') {
            // Add the orderId to the array of orders that is being stored in localStorage
            ordersPushedToGoogle.push(orderId);
            // The localStorage is what is used to prevent the duplicate send from mobile platforms
            window.localStorage.setItem('ordersPushedToGoogle', JSON.stringify(ordersPushedToGoogle));
        }
    }

    function getOrderId(dataLayer) {
        if ('ecommerce' in dataLayer) {
            if ('purchase' in dataLayer.ecommerce && 'actionField' in dataLayer.ecommerce.purchase &&
                'id' in dataLayer.ecommerce.purchase.actionField) {
                return dataLayer.ecommerce.purchase.actionField.id;
            }
        }

        return -1;
    }

    function getOrdersPushedToGoogle() {
        var ordersPushedToGoogleString = window.localStorage.getItem('ordersPushedToGoogle');
        if (ordersPushedToGoogleString && ordersPushedToGoogleString.length > 0) {
            return JSON.parse(ordersPushedToGoogleString);
        }

        return [];
    }

    function orderHasBeenPushedToGoogle(orderId, ordersPushedToGoogle) {
        if (orderId) {
            for (var index = 0; index < ordersPushedToGoogle.length; index++) {
                if (ordersPushedToGoogle[index] === orderId) {
                    return true;
                }
            }
        }

        return false;
    }
</script>
<iscomment>Remote include for customer specific data</iscomment>
<isinclude url="${URLUtils.url('GTM-CustomerData')}"/>

<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','${pdict.id}');</script>
<!-- End Google Tag Manager -->

<iscomment>This is where GTM events are initialized</iscomment>
<script defer src="${URLUtils.staticURL('/js/tagmanager.js')}"></script>